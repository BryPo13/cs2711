	public void addItem(Integer item){		.	
		head = new Node( item, head);		.	1
		if (isEmpty())						.
			tail = head;					.	1
		size++;								.	1
	}										.
	
	Worse case = 1+1+1 = 3
	
	
	public void removeOneItem(Integer item){	. 
		Node temp2 = head.getNext();			.	
												.
		if(head.getItem() == item){				.   
			head.setNext(null);					.   
			head = temp2;						.   
			size--;								.   
		}										.
		else{									.
												.
			while(temp2.getItem()!= item){		.    bag.size
				if(temp2 == null) return;		.
				temp1 = temp2;					.    bag.size
				temp2 = temp2.next;				.    bag.size
			}
			temp1.setNext(temp2.getNext());		.	1
			temp2.setNext(null);				.	1
			size--;								.   1
		}
	}
	
	Worse Case = 3*bag.size + 3
	
	
	
		public void removeAllItem(Integer item){	.
		Node temp1 = head;							.1	
		Node temp2 = head.getNext();				.1
		
		
		while(temp2 != null){						. bag.size-1
			
			if(head.getItem() == item){				.
				head.setNext(null);					.
				head = temp2;						.
				temp1 = temp2;						.
				temp2 = temp2.getNext();			.
				size--;								. 
			}										. 
			else									.
			if(temp2.getItem() == item){			.1
				temp1.setNext(temp2.getNext());		.1
				temp2.setNext(null);				.1
				temp2 = temp1.getNext();			.1
				size--;								.1
			}
			else{								
			temp1 = temp2;							.bag.size-1
			temp2 = temp2.next;						.bag.size-1
			}
		}		
	}
	
	
	Worsecase = 3*bag.size - 1  +7
	
	
	
	
	public Integer itemCount(Integer item){
		int count =0 ;
		Node temp1 = head;
		
		if(isEmpty()) return count;
		
		while(temp1 != null){
			if (temp1.getItem() == item) count++;  	.bag.size
			temp1 = temp1.getNext();				.bag.size
		}
		
		return count;
	}
	
	
	Worse Case  =   2bag.size
	
	
	
	
	
	