import java.util.Stack;

public class DisplayTree {
	
	class Node<E>{
		
		private E element; 
		private Node<E> parent;
		private Node<E> leftChild;
		private Node<E> rightChild;
		
		public Node(E e, Node<E> p,Node<E> l,Node<E> r){
			element = e;
			parent = p;
			leftChild = l;
			rightChild = r;
		}
	
		public E getElement(){
			return element;
		}
		
		public Node<E> getLeftChild(){
			return leftChild;
		}
		
		public Node<E> getRightChild(){
			return rightChild;
		}
		
		public Node<E> getParent(){
			return parent;	
		}
		
		public void setElement (E e){
			element = e;
		}
		public void setLeftChild(Node<E> l){
			leftChild = l;
		}
		public void setRightChild(Node<E> r){
			rightChild = r;
		}
		public void setParent (Node<E> p){
			parent = p;
		}
	}
	
	
	
	@SuppressWarnings("rawtypes")
	public static void main(String[] args){
		String expression = "((1+2)+(3*4))";
		Stack<Node> opStack = new Stack<Node>();
		Stack<Node> numStack = new Stack<Node>();
		Node node = null;
		
		
        int x = 0;
        while (x < expression.length()) {
        	char y = expression.charAt(x);
        	if(y == '(' ){
        		x++;
        		break;
        	}
        	if(y == '+' || y == '-' || y == '*' || y == '/'){
        		node = new Node(y, null, null,null);
        		opStack.push(node);
        		x++;
        		break;
        	}
        	if( y == ')'){
        		
        		
        		
        		x++;
        		break;
        	}
        	
            System.out.println(expression.charAt(x));
            x++; 
        }
    }
				
}
	


